{"name": "test_product_view_sku", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome-headless-shell=120.0.6099.225)\nStacktrace:\n\tGetHandleVerifier [0x00007FF758552142+3514994]\n\t(No symbol) [0x00007FF758170CE2]\n\t(No symbol) [0x00007FF7580174C3]\n\t(No symbol) [0x00007FF758062D29]\n\t(No symbol) [0x00007FF758056A0F]\n\t(No symbol) [0x00007FF758085FEA]\n\t(No symbol) [0x00007FF7580563B6]\n\t(No symbol) [0x00007FF758086490]\n\t(No symbol) [0x00007FF7580A28F6]\n\t(No symbol) [0x00007FF758085D93]\n\t(No symbol) [0x00007FF758054BDC]\n\t(No symbol) [0x00007FF758055C64]\n\tGetHandleVerifier [0x00007FF75857E16B+3695259]\n\tGetHandleVerifier [0x00007FF7585D6737+4057191]\n\tGetHandleVerifier [0x00007FF7585CE4E3+4023827]\n\tGetHandleVerifier [0x00007FF7582A04F9+689705]\n\t(No symbol) [0x00007FF75817C048]\n\t(No symbol) [0x00007FF758178044]\n\t(No symbol) [0x00007FF7581781C9]\n\t(No symbol) [0x00007FF7581688C4]\n\tBaseThreadInitThunk [0x00007FFA31DA7034+20]\n\tRtlUserThreadStart [0x00007FFA332A2651+33]", "trace": "def test_product_view_sku():\n        \"\"\"\n        Test case TMS#1 [web][pos][auto]\n        \"\"\"\n    \t\t# Описываем опции запуска браузера\n        chrome_options = Options()\n        chrome_options.add_argument(\"start-maximized\") # открываем на полный экран\n        chrome_options.add_argument(\"--disable-infobars\") # отключаем инфо сообщения\n        chrome_options.add_argument(\"--disable-extensions\") # отключаем расширения\n        chrome_options.add_argument(\"--headless\") # спец. режим \"без браузера\"\n    \n    \t\t# устанавливаем webdriver в соответствии с версией используемого браузера\n        service = Service()\n        # запускаем браузер с указанными выше настройками\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n    \n        driver.get(url=url)          # определяем адрес страницы для теста и переходим на неё\n    \n        \t# ищем по селектору элемент меню \"Бестселлеры\" и кликаем по нему\n        element_catalog = driver.find_element(by=By.CSS_SELECTOR, value=\"[class*='tab-best_sellers']\")\n>       element_catalog.click()\n\ntests\\test_qastudio.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B5D1ABB9A0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...07FF7581688C4]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA31DA7034+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA332A2651+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome-headless-shell=120.0.6099.225)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF758552142+3514994]\nE       \t(No symbol) [0x00007FF758170CE2]\nE       \t(No symbol) [0x00007FF7580174C3]\nE       \t(No symbol) [0x00007FF758062D29]\nE       \t(No symbol) [0x00007FF758056A0F]\nE       \t(No symbol) [0x00007FF758085FEA]\nE       \t(No symbol) [0x00007FF7580563B6]\nE       \t(No symbol) [0x00007FF758086490]\nE       \t(No symbol) [0x00007FF7580A28F6]\nE       \t(No symbol) [0x00007FF758085D93]\nE       \t(No symbol) [0x00007FF758054BDC]\nE       \t(No symbol) [0x00007FF758055C64]\nE       \tGetHandleVerifier [0x00007FF75857E16B+3695259]\nE       \tGetHandleVerifier [0x00007FF7585D6737+4057191]\nE       \tGetHandleVerifier [0x00007FF7585CE4E3+4023827]\nE       \tGetHandleVerifier [0x00007FF7582A04F9+689705]\nE       \t(No symbol) [0x00007FF75817C048]\nE       \t(No symbol) [0x00007FF758178044]\nE       \t(No symbol) [0x00007FF7581781C9]\nE       \t(No symbol) [0x00007FF7581688C4]\nE       \tBaseThreadInitThunk [0x00007FFA31DA7034+20]\nE       \tRtlUserThreadStart [0x00007FFA332A2651+33]\n\nenv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementNotInteractableException"}, "description": "\n    Test case TMS#1 [web][pos][auto]\n    ", "start": 1706190001778, "stop": 1706190009521, "uuid": "4f4f20a7-46b0-43fc-94b2-d17ed7480993", "historyId": "3d6bfc0857f2f760bdd193b1567339e2", "testCaseId": "3d6bfc0857f2f760bdd193b1567339e2", "fullName": "tests.test_qastudio#test_product_view_sku", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_qastudio"}, {"name": "host", "value": "KOMPUTER"}, {"name": "thread", "value": "7488-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_qastudio"}]}